(** File generated by coq-of-ocaml *)
(** minor changes after the generation *)
Require Import CoqOfOCaml.CoqOfOCaml.
Require Import CoqOfOCaml.Settings.

#[bypass_check(guard)]
Definition merge_sort (l_value : list int) : list int :=
  let merge (l_value : list int) (l' : list int) : list int :=
    let fix merge_aux (l_value : list int) (l' : list int) (acc : list int)
      {struct acc} : list int :=
      match (l_value, l') with
      | ([], []) => List.rev acc
      | (_, []) => CoqOfOCaml.Stdlib.app (List.rev acc) l_value
      | ([], _) => CoqOfOCaml.Stdlib.app (List.rev acc) l'
      | (cons x_value xs, cons y_value ys) =>
        if equiv_decb x_value y_value then
          merge_aux xs ys (cons x_value (cons y_value acc))
        else
          if CoqOfOCaml.Stdlib.lt x_value y_value then
            merge_aux xs l' (cons x_value acc)
          else
            merge_aux l_value ys (cons y_value acc)
      end in
    merge_aux l_value l' nil in
  let split (l_value : list int) : list int * list int :=
    let fix split_aux (l_value : list int) (acc : list int) (i_value : int)
      {struct acc} : list int * list int :=
      if i_value =? 0 then
        (l_value, (List.rev acc))
      else
        match l_value with
        | [] => (l_value, (List.rev acc))
        | cons x_value xs => split_aux xs (cons x_value acc) (Z.sub i_value 1)
        end in
    split_aux l_value nil (Z.div (CoqOfOCaml.List.length l_value) 2) in
  let fix aux (l_value : list int) : list int :=
    match l_value with
    | [] => nil
    | cons x_value [] => [ x_value ]
    | _ =>
      let '(l1, l2) := split l_value in
      merge (aux l1) (aux l2)
    end in
  aux l_value.

Compute (merge_sort [5;3;10;4]).
(* >> [3; 4; 5; 10] *)